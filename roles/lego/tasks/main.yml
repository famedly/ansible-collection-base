---
- name: Install dependencies
  ansible.builtin.apt:
    name: >-
      {{
        (ansible_distribution_major_version | string in lego_dependencies[ansible_distribution])
          | ternary(lego_dependencies[ansible_distribution][ansible_distribution_major_version | string],
                    lego_dependencies[ansible_distribution]['all'])
      }}
  when: lego_install_dependencies | bool and ansible_facts['pkg_mgr'] == 'apt'

- name: "Ensure lego user is created"
  user:
    name: "{{ lego_user }}"
    state: "present"
    system: true
  register: "lego_user_res"
  tags: ["prepare", "prepare-lego"]

- name: "Ensure base directory for lego is created"
  file:
    path: "{{ lego_base_path }}"
    state: "directory"
    owner: "{{ lego_certificate_store_user }}"
    group: "{{ lego_certificate_store_group }}"
    mode: "0755"
  tags: ["prepare", "prepare-lego"]

- name: "Ensure certificate directory exists and has the configured permissions"
  ansible.builtin.file:
    path: "{{ lego_certificate_store }}"
    state: "directory"
    owner: "{{ lego_certificate_store_user }}"
    group: "{{ lego_certificate_store_group }}"
    mode: "{{ lego_certificate_store_mode }}"
  tags: ["prepare", "prepare-lego"]
  register: lego_certificate_store_info

- name: "Ensure certificates in directory belong to '{{ lego_certificate_store_user }}:{{ lego_certificate_store_group }}'"
  ansible.builtin.file:
    path: "{{ lego_certificate_store }}"
    state: directory
    owner: "{{ lego_certificate_store_user }}"
    group: "{{ lego_certificate_store_group }}"
    recurse: true
  tags: ["prepare", "prepare-lego"]
  when: lego_certificate_store_info.changed

- name: "Ensure lego binary exists and has the correct version"
  shell: "{{ lego_check_version_cmd }}"  # noqa: command-instead-of-shell
  check_mode: false
  changed_when: false
  ignore_errors: true
  register: "lego_version_res"
  tags: ["prepare", "prepare-lego"]

- name: "Ensure lego metrics textfile generator exists"
  template:
    src: "metrics-textfile.py.j2"
    dest: "{{ lego_base_path }}/metrics-textfile.py"
    owner: "root"
    group: "root"
    mode: "0755"
  when: "lego_enable_metrics_textfile"
  tags: ["prepare", "prepare-lego"]

- name: "Install lego from github releases"
  when: "lego_version_res.failed or not lego_version in lego_version_res.stdout"
  block:
    - name: "Download source file"
      get_url:
        url: "{{ lego_source_url }}"
        dest: "{{ lego_base_path }}/source.tar"
        checksum: "{{ lego_source_checksum_url }}"
        url_username: "{{ lego_source_url_http_username | default(omit, true) }}"
        url_password: "{{ lego_source_url_http_password | default(omit, true) }}"
        force_basic_auth: "{{ lego_source_url_http_username | default(false, true) | bool }}"
        mode: "0644"
      tags: ["prepare", "prepare-lego"]

    - name: "Unpack source files"
      unarchive:
        src: "{{ lego_base_path }}/source.tar"
        dest: "{{ lego_base_path }}"
        owner: "{{ lego_user_res.uid }}"
        group: "{{ lego_user_res.group }}"
        remote_src: true
      tags: ["prepare", "prepare-lego"]
      when: not ansible_check_mode

    - name: "Allow lego to bind to ports below 1024"
      community.general.capabilities:
        path: "{{ lego_executable }}"
        capability: "cap_net_bind_service=+ep"
        state: "present"
      when: "lego_cap_net_bind_service"
      tags: ["prepare", "prepare-lego"]

    - name: "Delete source files"
      file:
        path: "{{ lego_base_path }}/source.tar"
        state: "absent"
      tags: ["prepare", "prepare-lego"]

- name: "Create acme account"
  when: "lego_acme_account is defined and lego_acme_privkey is defined"
  block:
    - name: "Create account directory"
      file:
        path: "{{ lego_acme_account_base_path }}"
        state: "directory"
        mode: "0755"
        owner: "{{ lego_user_res.uid }}"
        group: "{{ lego_user_res.group }}"
      tags: ["prepare", "prepare-lego"]

    - name: "Create key directory"
      file:
        path: "{{ lego_acme_key_base_path }}"
        state: "directory"
        mode: "0755"
        owner: "{{ lego_user_res.uid }}"
        group: "{{ lego_user_res.group }}"
      tags: ["prepare", "prepare-lego"]

    - name: "Save acme account"
      copy:
        dest: "{{ lego_acme_account_path }}"
        content: "{{ lego_acme_account_merged | to_json }}"
        mode: "0600"
        owner: "{{ lego_user_res.uid }}"
        group: "{{ lego_user_res.group }}"
      tags: ["deploy", "deploy-lego"]

    - name: "Save acme private key"
      copy:
        dest: "{{ lego_acme_key_path }}"
        content: "{{ lego_acme_privkey }}"
        mode: "0600"
        owner: "{{ lego_user_res.uid }}"
        group: "{{ lego_user_res.group }}"
      tags: ["deploy", "deploy-lego"]

- name: "Check if certificate file exists"
  ansible.builtin.stat:
    path: "{{ lego_certificate_store }}/{{ lego_certificate.domains[0] }}.crt"
  register: "lego_certificate_stat"
  changed_when: "not lego_certificate_stat.stat.exists"
  notify: ["Run lego"]
  tags: ["deploy", "deploy-lego"]

- name: "Check if certificate is nonexistent or differs from wanted state"
  when:
    - lego_certificate_stat.stat.exists
    - lego_certificate_stat.stat.size > 0
  block:
    - name: "Fetch certificate info"
      community.crypto.x509_certificate_info:
        path: "{{ lego_certificate_store }}/{{ lego_certificate.domains[0] }}.crt"
      register: "lego_certificate_info"
      tags: ["deploy", "deploy-lego"]

    # you have to seperatly loop because map with regex_replace does not like getting AnsibleUnsafeText objects
    - name: "Remove DNS at the start of the SAN"
      ansible.builtin.set_fact:
        lego_certificate_sans: "{{ lego_certificate_sans | default([]) + [item | regex_replace('^DNS:', '')] }}"
      loop: "{{ lego_certificate_info.subject_alt_name }}"
      tags: ["deploy", "deploy-lego"]

    - name: "Compare SANs, notify handler if they differ"
      ansible.builtin.set_fact:
        lego_certificate_sans_equal: >-2
          {{
            lego_certificate.domains is superset(lego_certificate_sans)
            and lego_certificate.domains is subset(lego_certificate_sans)
          }}
      changed_when: "not lego_certificate_sans_equal"
      notify: ["Run lego"]
      tags: ["deploy", "deploy-lego"]

    - name: "Compare pubkey type, notify handler if it differs"
      ansible.builtin.set_fact:
        lego_certificate_pubkey_type_differs: "{{ lego_certificate_info.public_key_type != lego_certificate_wanted_keytype }}"
      vars:
        lego_certificate_wanted_keytype: >-2
          {{
            "ECC" if "ec" in lego_configuration_merged.command_parameters.global["key-type"]
            else "RSA" if "rsa" in lego_configuration_merged.command_parameters.global["key-type"]
          }}
      changed_when: "lego_certificate_pubkey_type_differs"
      notify: ["Run lego"]
      tags: ["deploy", "deploy-lego"]

- name: "Notify handler if pubkey is empty"
  ansible.builtin.debug:
    msg: "pubkey file exists, but is empty"
  when:
    - lego_certificate_stat.stat.exists
    - lego_certificate_stat.stat.size == 0
  changed_when: true
  notify: ["Run lego"]
  tags: ["deploy", "deploy-lego"]

- name: "Ensure systemd unit file for lego is templated"
  template:
    src: "lego.service.j2"
    dest: "{{ lego_systemd_path }}/lego.service"
    owner: "root"
    group: "root"
    mode: "0640"
  notify: ["Reload systemd"]
  tags: ["deploy", "deploy-lego"]

- name: "Ensure systemd timer for lego is templated"
  template:
    src: "lego.timer.j2"
    dest: "{{ lego_systemd_path }}/lego.timer"
    owner: "root"
    group: "root"
    mode: "0640"
  notify: ["Reload systemd"]
  tags: ["deploy", "deploy-lego"]

- name: "Flush handlers to ensure systemd has loaded the unit files"
  meta: "flush_handlers"

- name: "Enable lego.service"
  systemd:
    name: "lego.service"
    state: "started"
    enabled: true
  tags: ["deploy", "deploy-lego"]

- name: "Enable lego.timer"
  systemd:
    name: "lego.timer"
    state: "started"
    enabled: true
  tags: ["deploy", "deploy-lego"]
